const compression = require('compression');
const cookieParser = require('cookie-parser');
const debug = require('debug')('cw:server');
const express = require('express');
const basicAuth = require('express-basic-auth');
const xmlSitemapProxy = require('./xmlsitemap');
const internalRoutes = require('./internalRoutes');

const applyFalconRoutesConfiguration = (app, expressServer = express()) => {
  // Make sure we enable http auth only on dev environments.
  if (process.env.ENVIRONMENT && (process.env.ENVIRONMENT === 'development')) {
    // Make sure that we do have http user & password set in variables.
    if (process.env.HTTP_AUTH_USER && process.env.HTTP_AUTH_PASS) {
      expressServer.use(basicAuth({
        users: {
          [process.env.HTTP_AUTH_USER]: process.env.HTTP_AUTH_PASS,
        },
        challenge: true,
      }));
    }
  }

  // A little middleware that helps to parse the incoming cookies.
  expressServer.use(cookieParser());

  // Serve gzipped content where possible.
  expressServer.use(compression());

  // Set browser caching for all static files of the app.
  expressServer.use('/static', express.static(`${app.dir}/static`, {
    maxAge: process.env.STATIC_MAX_AGE || '7d',
    fallthrough: false,
  }));

  // Set browser caching for all static files generated by Next.js.
  expressServer.use('/_next/static', express.static(`${app.dir}/.next/static`, {
    maxAge: process.env.STATIC_MAX_AGE || '7d',
    fallthrough: false,
  }));

  expressServer.get('/sitemap.xml', async (req, res) => xmlSitemapProxy(req, res, app, process.env.SITEMAP_NAME));

  // Fail fast on any express handler error.
  expressServer.use((err, req, res, next) => {
    debug('Express.js handler error: %o', err);

    if (res.headersSent) {
      return next(err);
    }

    return res.status(err.statusCode).send(err.statusCode === 404 ? 'Page not found' : 'An unexpected error occurred');
  });

  expressServer.use(internalRoutes(app));

  return expressServer;
};

module.exports = applyFalconRoutesConfiguration;
