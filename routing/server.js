const nextjs = require('next');
const compression = require('compression');
const cookieParser = require('cookie-parser');
const debug = require('debug')('falconjs:routing/server');
const express = require('express');
const basicAuth = require('express-basic-auth');
const favicon = require('serve-favicon');
const xmlSitemapProxy = require('./xmlsitemap');
const internalRoutes = require('./internalRoutes');
const decoupledRouter = require('./decoupledRouter');
const frontendOnlyRoutes = require('./frontendOnlyRoutes');
const { globalSettingsForApp, handleHomepageRequest } = require('./globalSettings');
const clearCache = require('./clearCache');
const { defaultFalconConfig } = require('../utils/constants');

const applyFalconRoutingConfiguration = (app, expressServer = express()) => {
  // Make sure we enable http auth only on dev environments.
  if (process.env.ENVIRONMENT && (process.env.ENVIRONMENT === 'development')) {
    // Make sure that we do have http user & password set in variables.
    if (process.env.HTTP_AUTH_USER && process.env.HTTP_AUTH_PASS) {
      expressServer.use(basicAuth({
        users: {
          [process.env.HTTP_AUTH_USER]: process.env.HTTP_AUTH_PASS,
        },
        challenge: true,
      }));
    }
  }

  // A little middleware that helps to parse the incoming cookies.
  expressServer.use(cookieParser());

  // Serve gzipped content where possible.
  expressServer.use(compression());

  // Set browser caching for all static files of the app.
  expressServer.use('/static', express.static(`${app.dir}/static`, {
    maxAge: process.env.STATIC_CACHE_MAX_AGE || '7d',
    fallthrough: false,
  }));

  // Set browser caching for all static files generated by Next.js.
  expressServer.use('/_next/static', express.static(`${app.dir}/.next/static`, {
    maxAge: process.env.STATIC_CAHCE_MAX_AGE || '7d',
    fallthrough: false,
  }));

  expressServer.get('/sitemap.xml', async (req, res) => xmlSitemapProxy(req, res, app, process.env.SITEMAP_NAME));

  // Fail fast on any express handler error.
  expressServer.use((err, req, res, next) => {
    debug('Express.js handler error: %o', err);

    if (res.headersSent) {
      return next(err);
    }

    return res.status(err.statusCode).send(err.statusCode === 404 ? 'Page not found' : 'An unexpected error occurred');
  });

  expressServer.use(internalRoutes(app));
  expressServer.use((req, res, next) => {
    res.falcon = {};
    next();
  });

  return expressServer;
};

const startFalconServer = (
  userFalconConfig = {},
  userNextConfig = {},
  expressServer = express(),
) => new Promise((resolve, reject) => {
  // Merge default falcon config with config from user.
  const falconConfig = Object.assign(defaultFalconConfig, userFalconConfig);
  const {
    HTTP_AUTH_USER,
    HTTP_AUTH_PASS,
    APPLICATION_NAME,
    BACKEND_URL,
    FRONTEND_URL,
    CONSUMER_ID,
    ENVIRONMENT,
    PAYMENT_SECRET_HEADER_NAME,
    APP_ONLY_ROUTES,
    FAVICON,
    CLEAR_CACHE_URL,
  } = falconConfig;

  const application = nextjs(userNextConfig);

  // Disable routes like /node/page.
  application.nextConfiguseFileSystemPublicRoutes = false;

  // Define variables for server side.
  application.nextConfig.serverRuntimeConfig = Object.assign(
    application.nextConfig.serverRuntimeConfig || {},
    { HTTP_AUTH_USER, HTTP_AUTH_PASS },
  );

  // Define variables for client side.
  application.nextConfig.publicRuntimeConfig = Object.assign(
    application.nextConfig.publicRuntimeConfig || {},
    {
      APPLICATION_NAME,
      BACKEND_URL,
      FRONTEND_URL,
      CONSUMER_ID,
      ENVIRONMENT,
      PAYMENT_SECRET_HEADER_NAME,
      APP_ONLY_ROUTES,
    },
  );

  application
    .prepare()
    .then(() => {
      const server = applyFalconRoutingConfiguration(application, expressServer);

      if (FAVICON) {
        server.use(favicon(`${application.dir}${FAVICON}`));
      }

      if (CLEAR_CACHE_URL) {
        server.use(CLEAR_CACHE_URL, clearCache);
      }

      server.use(globalSettingsForApp(application, APPLICATION_NAME));
      server.use(handleHomepageRequest);

      if (APP_ONLY_ROUTES) {
        server.use(frontendOnlyRoutes(application, APP_ONLY_ROUTES));
      }

      // Handle all other requests using our custom router which is a mix
      // or original Next.js logic and Drupal routing logic.
      server.get('*', (req, res) => decoupledRouter(req, res, application));

      resolve(server);
    })
    .catch(error => reject(error));
});


module.exports = {
  startFalconServer,
  applyFalconRoutingConfiguration,
};
